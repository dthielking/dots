" Vundel config
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Git plugin
Plugin 'tpope/vim-fugitive'
" Airline Plugin to add upper line
Plugin 'vim-airline/vim-airline'
" Simpylfold
Plugin 'tmhedberg/SimpylFold'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" End Vundle config

scriptencoding utf-8                " set character encoding
set encoding=utf-8                  " same as above?

" showing whitespaces character and configure them
set list
set listchars=eol:$,tab:»·,trail:·

" enable syntax highlighting and colorscheme
" and some other special visualization modes
syntax on                           " set syntax highlighting on
set number                          " set line numbers on
colorscheme darkblue                " set colorscheme to darkblue
set colorcolumn=100                 " sets a vertical column for orientation
set cursorline                      " highlight current line

"" set vim editor behavior in command mode
set wildmenu                        " visual autocomplete for command menu
set viminfo='25,f1,<250,:25,n~/.viminfo " store some info in ~/.viminfo

" set vim editor behavior in text mode
set autoindent                      " use same indent in nextline as in previous one
set expandtab                       " tabs are spaces
set tabstop=4                       " tabs in files are four spaces
set softtabstop=4                   " same as tabstop but for my one <TAB>

" search behavior
set incsearch                       " search as characters are entered
set hlsearch                        " highlight matches
" Stop search highlighting with keystroke ,<space>
nnoremap ,<space> :nohlsearch<CR>


set foldenable      " enable folding

"" Key mappings
" Map comma as additional meta char
let mapleader=","
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" Use keystroke jk instead of <esc>
inoremap jk<esc>

" Fold and show doctstring
let g:SimpylFold_docstring_preview = 1

augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END
